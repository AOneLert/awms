

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
    public sealed partial class PickingSlipDetail : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the PickingSlipDetail entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PickingSlipDetail()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PickingSlipDetail(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.PickingSlipDetail> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.PickingSlipDetail.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingSlipDetail_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingSlipDetail_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Id
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Id);
            }
            set
            {
                global::LightSwitchApplication.PickingSlipDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Id, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string LotNo
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.LotNo);
            }
            set
            {
                global::LightSwitchApplication.PickingSlipDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.LotNo, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LotNo_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LotNo_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LotNo_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double PickingQuantity
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.PickingQuantity);
            }
            set
            {
                global::LightSwitchApplication.PickingSlipDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.PickingQuantity, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingQuantity_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingQuantity_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingQuantity_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal UnitPrice
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.UnitPrice);
            }
            set
            {
                global::LightSwitchApplication.PickingSlipDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.UnitPrice, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UnitPrice_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UnitPrice_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UnitPrice_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CreatedBy
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.CreatedBy);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_Changed();
        public global::Microsoft.LightSwitch.Framework.Server.PersonInfo CreatedByInfo
        {
            get
            {
                global::Microsoft.LightSwitch.Server.IPersonInfoFactory personInfoFactory = global::LightSwitchApplication.Application.Current.GetPersonInfoFactory();
                return (global::Microsoft.LightSwitch.Framework.Server.PersonInfo) personInfoFactory.ResolvePerson(this.CreatedBy);
            }
        }

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTimeOffset> Created
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Created);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Created_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Created_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Created_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ModifiedBy
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.ModifiedBy);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ModifiedBy_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ModifiedBy_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ModifiedBy_Changed();
        public global::Microsoft.LightSwitch.Framework.Server.PersonInfo ModifiedByInfo
        {
            get
            {
                global::Microsoft.LightSwitch.Server.IPersonInfoFactory personInfoFactory = global::LightSwitchApplication.Application.Current.GetPersonInfoFactory();
                return (global::Microsoft.LightSwitch.Framework.Server.PersonInfo) personInfoFactory.ResolvePerson(this.ModifiedBy);
            }
        }

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTimeOffset> Modified
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Modified);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Modified_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Modified_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Modified_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public byte[] RowVersion
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.RowVersion);
            }
            set
            {
                global::LightSwitchApplication.PickingSlipDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.RowVersion, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.PickingSlip PickingSlip
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.PickingSlip);
            }
            set
            {
                global::LightSwitchApplication.PickingSlipDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.PickingSlip, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingSlip_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingSlip_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingSlip_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.OrderRequisitionDetail OrderRequisitionDetail
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.OrderRequisitionDetail);
            }
            set
            {
                global::LightSwitchApplication.PickingSlipDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.OrderRequisitionDetail, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderRequisitionDetail_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderRequisitionDetail_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderRequisitionDetail_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Location Location
        {
            get
            {
                return global::LightSwitchApplication.PickingSlipDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Location);
            }
            set
            {
                global::LightSwitchApplication.PickingSlipDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Location, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Location_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Location_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Location_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.PickingSlipDetail,
                global::LightSwitchApplication.PickingSlipDetail.DetailsClass,
                global::LightSwitchApplication.PickingSlipDetail.DetailsClass.IImplementation,
                global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Id;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass>.Entry
                __PickingSlipDetailEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass>.Entry(
                    global::LightSwitchApplication.PickingSlipDetail.DetailsClass.__PickingSlipDetail_CreateNew,
                    global::LightSwitchApplication.PickingSlipDetail.DetailsClass.__PickingSlipDetail_Created,
                    global::LightSwitchApplication.PickingSlipDetail.DetailsClass.__PickingSlipDetail_AllowSaveWithErrors);
            private static global::LightSwitchApplication.PickingSlipDetail __PickingSlipDetail_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.PickingSlipDetail> es)
            {
                return new global::LightSwitchApplication.PickingSlipDetail(es);
            }
            private static void __PickingSlipDetail_Created(global::LightSwitchApplication.PickingSlipDetail e)
            {
                e.PickingSlipDetail_Created();
            }
            private static bool __PickingSlipDetail_AllowSaveWithErrors(global::LightSwitchApplication.PickingSlipDetail e)
            {
                bool result = false;
                e.PickingSlipDetail_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, int> Id
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Id) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string> LotNo
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.LotNo) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, double> PickingQuantity
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.PickingQuantity) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, decimal> UnitPrice
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.UnitPrice) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string> CreatedBy
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.CreatedBy) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>> Created
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Created) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string> ModifiedBy
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.ModifiedBy) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>> Modified
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Modified) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, byte[]> RowVersion
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.RowVersion) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, byte[]>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.PickingSlip> PickingSlip
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.PickingSlip) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.PickingSlip>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.OrderRequisitionDetail> OrderRequisitionDetail
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.OrderRequisitionDetail) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.OrderRequisitionDetail>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.Location> Location
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Location) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.Location>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int Id { get; set; }
                new string LotNo { get; set; }
                new double PickingQuantity { get; set; }
                new decimal UnitPrice { get; set; }
                new string CreatedBy { get; }
                new global::System.Nullable<global::System.DateTimeOffset> Created { get; }
                new string ModifiedBy { get; }
                new global::System.Nullable<global::System.DateTimeOffset> Modified { get; }
                new byte[] RowVersion { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation PickingSlip { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation OrderRequisitionDetail { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Location { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, int>.Entry
                    Id = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, int>.Entry(
                        "Id",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Id_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Id_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Id_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Id_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Id_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Id_OnValueChanged);
                private static void _Id_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, int>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._Id, sf);
                }
                private static bool _Id_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.Id_IsReadOnly(ref result);
                    return result;
                }
                private static void _Id_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Id_Validate(r);
                }
                private static int _Id_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.Id;
                }
                private static void _Id_SetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, int v)
                {
                    d.ImplementationEntity.Id = v;
                }
                private static void _Id_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.Id_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Entry
                    LotNo = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Entry(
                        "LotNo",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._LotNo_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._LotNo_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._LotNo_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._LotNo_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._LotNo_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._LotNo_OnValueChanged);
                private static void _LotNo_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._LotNo, sf);
                }
                private static bool _LotNo_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.LotNo_IsReadOnly(ref result);
                    return result;
                }
                private static void _LotNo_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.LotNo_Validate(r);
                }
                private static string _LotNo_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.LotNo;
                }
                private static void _LotNo_SetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, string v)
                {
                    d.ImplementationEntity.LotNo = v;
                }
                private static void _LotNo_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.LotNo_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, double>.Entry
                    PickingQuantity = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, double>.Entry(
                        "PickingQuantity",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingQuantity_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingQuantity_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingQuantity_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingQuantity_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingQuantity_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingQuantity_OnValueChanged);
                private static void _PickingQuantity_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, double>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._PickingQuantity, sf);
                }
                private static bool _PickingQuantity_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.PickingQuantity_IsReadOnly(ref result);
                    return result;
                }
                private static void _PickingQuantity_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.PickingQuantity_Validate(r);
                }
                private static double _PickingQuantity_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.PickingQuantity;
                }
                private static void _PickingQuantity_SetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, double v)
                {
                    d.ImplementationEntity.PickingQuantity = v;
                }
                private static void _PickingQuantity_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.PickingQuantity_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, decimal>.Entry
                    UnitPrice = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, decimal>.Entry(
                        "UnitPrice",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._UnitPrice_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._UnitPrice_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._UnitPrice_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._UnitPrice_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._UnitPrice_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._UnitPrice_OnValueChanged);
                private static void _UnitPrice_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._UnitPrice, sf);
                }
                private static bool _UnitPrice_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.UnitPrice_IsReadOnly(ref result);
                    return result;
                }
                private static void _UnitPrice_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.UnitPrice_Validate(r);
                }
                private static decimal _UnitPrice_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.UnitPrice;
                }
                private static void _UnitPrice_SetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.UnitPrice = v;
                }
                private static void _UnitPrice_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.UnitPrice_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Entry
                    CreatedBy = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Entry(
                        "CreatedBy",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._CreatedBy_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._CreatedBy_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._CreatedBy_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._CreatedBy_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._CreatedBy_OnValueChanged);
                private static void _CreatedBy_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._CreatedBy, sf);
                }
                private static bool _CreatedBy_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.CreatedBy_IsReadOnly(ref result);
                    return result;
                }
                private static void _CreatedBy_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.CreatedBy_Validate(r);
                }
                private static string _CreatedBy_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.CreatedBy;
                }
                private static void _CreatedBy_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.CreatedBy_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Entry
                    Created = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Entry(
                        "Created",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Created_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Created_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Created_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Created_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Created_OnValueChanged);
                private static void _Created_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._Created, sf);
                }
                private static bool _Created_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.Created_IsReadOnly(ref result);
                    return result;
                }
                private static void _Created_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Created_Validate(r);
                }
                private static global::System.Nullable<global::System.DateTimeOffset> _Created_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.Created;
                }
                private static void _Created_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.Created_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Entry
                    ModifiedBy = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Entry(
                        "ModifiedBy",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._ModifiedBy_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._ModifiedBy_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._ModifiedBy_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._ModifiedBy_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._ModifiedBy_OnValueChanged);
                private static void _ModifiedBy_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._ModifiedBy, sf);
                }
                private static bool _ModifiedBy_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.ModifiedBy_IsReadOnly(ref result);
                    return result;
                }
                private static void _ModifiedBy_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ModifiedBy_Validate(r);
                }
                private static string _ModifiedBy_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.ModifiedBy;
                }
                private static void _ModifiedBy_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.ModifiedBy_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Entry
                    Modified = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Entry(
                        "Modified",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Modified_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Modified_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Modified_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Modified_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Modified_OnValueChanged);
                private static void _Modified_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._Modified, sf);
                }
                private static bool _Modified_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.Modified_IsReadOnly(ref result);
                    return result;
                }
                private static void _Modified_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Modified_Validate(r);
                }
                private static global::System.Nullable<global::System.DateTimeOffset> _Modified_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.Modified;
                }
                private static void _Modified_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.Modified_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, byte[]>.Entry
                    RowVersion = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, byte[]>.Entry(
                        "RowVersion",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._RowVersion_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._RowVersion_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._RowVersion_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._RowVersion_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._RowVersion_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._RowVersion_OnValueChanged);
                private static void _RowVersion_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, byte[]>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._RowVersion, sf);
                }
                private static bool _RowVersion_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.RowVersion_IsReadOnly(ref result);
                    return result;
                }
                private static void _RowVersion_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.RowVersion_Validate(r);
                }
                private static byte[] _RowVersion_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.RowVersion;
                }
                private static void _RowVersion_SetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, byte[] v)
                {
                    d.ImplementationEntity.RowVersion = v;
                }
                private static void _RowVersion_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.RowVersion_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.PickingSlip>.Entry
                    PickingSlip = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.PickingSlip>.Entry(
                        "PickingSlip",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingSlip_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingSlip_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingSlip_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingSlip_GetCoreImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingSlip_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingSlip_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingSlip_Refresh,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._PickingSlip_OnValueChanged);
                private static void _PickingSlip_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.PickingSlip>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._PickingSlip, sf);
                }
                private static bool _PickingSlip_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.PickingSlip_IsReadOnly(ref result);
                    return result;
                }
                private static void _PickingSlip_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.PickingSlip_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _PickingSlip_GetCoreImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.PickingSlip;
                }
                private static global::LightSwitchApplication.PickingSlip _PickingSlip_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass>(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.PickingSlip, ref d._PickingSlip);
                }
                private static void _PickingSlip_SetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, global::LightSwitchApplication.PickingSlip v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.PickingSlip, ref d._PickingSlip, (i, ev) => i.PickingSlip = ev, v);
                }
                private static void _PickingSlip_Refresh(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.PickingSlip, ref d._PickingSlip);
                }
                private static void _PickingSlip_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.PickingSlip_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.OrderRequisitionDetail>.Entry
                    OrderRequisitionDetail = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.OrderRequisitionDetail>.Entry(
                        "OrderRequisitionDetail",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._OrderRequisitionDetail_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._OrderRequisitionDetail_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._OrderRequisitionDetail_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._OrderRequisitionDetail_GetCoreImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._OrderRequisitionDetail_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._OrderRequisitionDetail_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._OrderRequisitionDetail_Refresh,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._OrderRequisitionDetail_OnValueChanged);
                private static void _OrderRequisitionDetail_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.OrderRequisitionDetail>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._OrderRequisitionDetail, sf);
                }
                private static bool _OrderRequisitionDetail_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.OrderRequisitionDetail_IsReadOnly(ref result);
                    return result;
                }
                private static void _OrderRequisitionDetail_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.OrderRequisitionDetail_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _OrderRequisitionDetail_GetCoreImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.OrderRequisitionDetail;
                }
                private static global::LightSwitchApplication.OrderRequisitionDetail _OrderRequisitionDetail_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.OrderRequisitionDetail, global::LightSwitchApplication.OrderRequisitionDetail.DetailsClass>(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.OrderRequisitionDetail, ref d._OrderRequisitionDetail);
                }
                private static void _OrderRequisitionDetail_SetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, global::LightSwitchApplication.OrderRequisitionDetail v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.OrderRequisitionDetail, ref d._OrderRequisitionDetail, (i, ev) => i.OrderRequisitionDetail = ev, v);
                }
                private static void _OrderRequisitionDetail_Refresh(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.OrderRequisitionDetail, ref d._OrderRequisitionDetail);
                }
                private static void _OrderRequisitionDetail_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.OrderRequisitionDetail_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.Location>.Entry
                    Location = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.Location>.Entry(
                        "Location",
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Location_Stub,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Location_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Location_Validate,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Location_GetCoreImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Location_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Location_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Location_Refresh,
                        global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties._Location_OnValueChanged);
                private static void _Location_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.Location>.Data> c, global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._Location, sf);
                }
                private static bool _Location_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    bool result = false;
                    e.Location_IsReadOnly(ref result);
                    return result;
                }
                private static void _Location_Validate(global::LightSwitchApplication.PickingSlipDetail e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Location_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Location_GetCoreImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.ImplementationEntity.Location;
                }
                private static global::LightSwitchApplication.Location _Location_GetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Location, global::LightSwitchApplication.Location.DetailsClass>(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Location, ref d._Location);
                }
                private static void _Location_SetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d, global::LightSwitchApplication.Location v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Location, ref d._Location, (i, ev) => i.Location = ev, v);
                }
                private static void _Location_Refresh(global::LightSwitchApplication.PickingSlipDetail.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.PickingSlipDetail.DetailsClass.PropertySetProperties.Location, ref d._Location);
                }
                private static void _Location_OnValueChanged(global::LightSwitchApplication.PickingSlipDetail e)
                {
                    e.Location_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, int>.Data _Id;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Data _LotNo;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, double>.Data _PickingQuantity;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, decimal>.Data _UnitPrice;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Data _CreatedBy;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Data _Created;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, string>.Data _ModifiedBy;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Data _Modified;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, byte[]>.Data _RowVersion;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.PickingSlip>.Data _PickingSlip;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.OrderRequisitionDetail>.Data _OrderRequisitionDetail;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass, global::LightSwitchApplication.Location>.Data _Location;
            
        }
    
        #endregion
    }
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
    public sealed partial class PickingSlip : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the PickingSlip entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PickingSlip()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PickingSlip(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.PickingSlip> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.PickingSlip.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingSlip_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingSlip_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Id
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Id);
            }
            set
            {
                global::LightSwitchApplication.PickingSlip.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Id, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string PickingNo
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.PickingNo);
            }
            set
            {
                global::LightSwitchApplication.PickingSlip.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.PickingNo, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingNo_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingNo_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingNo_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime PickingDate
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.PickingDate);
            }
            set
            {
                global::LightSwitchApplication.PickingSlip.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.PickingDate, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingDate_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingDate_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PickingDate_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double TotalWeight
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.TotalWeight);
            }
            set
            {
                global::LightSwitchApplication.PickingSlip.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.TotalWeight, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TotalWeight_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TotalWeight_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TotalWeight_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Status
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Status);
            }
            set
            {
                global::LightSwitchApplication.PickingSlip.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Status, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Status_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Status_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Status_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Remark
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Remark);
            }
            set
            {
                global::LightSwitchApplication.PickingSlip.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Remark, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Remark_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Remark_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Remark_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CreatedBy
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.CreatedBy);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_Changed();
        public global::Microsoft.LightSwitch.Framework.Server.PersonInfo CreatedByInfo
        {
            get
            {
                global::Microsoft.LightSwitch.Server.IPersonInfoFactory personInfoFactory = global::LightSwitchApplication.Application.Current.GetPersonInfoFactory();
                return (global::Microsoft.LightSwitch.Framework.Server.PersonInfo) personInfoFactory.ResolvePerson(this.CreatedBy);
            }
        }

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTimeOffset> Created
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Created);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Created_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Created_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Created_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ModifiedBy
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.ModifiedBy);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ModifiedBy_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ModifiedBy_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ModifiedBy_Changed();
        public global::Microsoft.LightSwitch.Framework.Server.PersonInfo ModifiedByInfo
        {
            get
            {
                global::Microsoft.LightSwitch.Server.IPersonInfoFactory personInfoFactory = global::LightSwitchApplication.Application.Current.GetPersonInfoFactory();
                return (global::Microsoft.LightSwitch.Framework.Server.PersonInfo) personInfoFactory.ResolvePerson(this.ModifiedBy);
            }
        }

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTimeOffset> Modified
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Modified);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Modified_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Modified_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Modified_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public byte[] RowVersion
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.RowVersion);
            }
            set
            {
                global::LightSwitchApplication.PickingSlip.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.RowVersion, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.TransportRoute TransportRoute
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.TransportRoute);
            }
            set
            {
                global::LightSwitchApplication.PickingSlip.DetailsClass.SetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.TransportRoute, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TransportRoute_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TransportRoute_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TransportRoute_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.EntityCollection<global::LightSwitchApplication.PickingSlipDetail> PickingSlipDetails
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetValue(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.PickingSlipDetails);
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.PickingSlipDetail> PickingSlipDetailsQuery
        {
            get
            {
                return global::LightSwitchApplication.PickingSlip.DetailsClass.GetQuery(this, global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.PickingSlipDetails);
            }
        }

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.PickingSlip,
                global::LightSwitchApplication.PickingSlip.DetailsClass,
                global::LightSwitchApplication.PickingSlip.DetailsClass.IImplementation,
                global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Id;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass>.Entry
                __PickingSlipEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass>.Entry(
                    global::LightSwitchApplication.PickingSlip.DetailsClass.__PickingSlip_CreateNew,
                    global::LightSwitchApplication.PickingSlip.DetailsClass.__PickingSlip_Created,
                    global::LightSwitchApplication.PickingSlip.DetailsClass.__PickingSlip_AllowSaveWithErrors);
            private static global::LightSwitchApplication.PickingSlip __PickingSlip_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.PickingSlip> es)
            {
                return new global::LightSwitchApplication.PickingSlip(es);
            }
            private static void __PickingSlip_Created(global::LightSwitchApplication.PickingSlip e)
            {
                e.PickingSlip_Created();
            }
            private static bool __PickingSlip_AllowSaveWithErrors(global::LightSwitchApplication.PickingSlip e)
            {
                bool result = false;
                e.PickingSlip_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, int> Id
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Id) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string> PickingNo
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.PickingNo) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.DateTime> PickingDate
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.PickingDate) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, double> TotalWeight
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.TotalWeight) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, bool> Status
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Status) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string> Remark
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Remark) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string> CreatedBy
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.CreatedBy) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>> Created
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Created) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string> ModifiedBy
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.ModifiedBy) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>> Modified
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.Modified) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, byte[]> RowVersion
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.RowVersion) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, byte[]>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.TransportRoute> TransportRoute
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.TransportRoute) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.TransportRoute>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.PickingSlipDetail> PickingSlipDetails
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.PickingSlipDetails) as global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.PickingSlipDetail>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int Id { get; set; }
                new string PickingNo { get; set; }
                new global::System.DateTime PickingDate { get; set; }
                new double TotalWeight { get; set; }
                new bool Status { get; set; }
                new string Remark { get; set; }
                new string CreatedBy { get; }
                new global::System.Nullable<global::System.DateTimeOffset> Created { get; }
                new string ModifiedBy { get; }
                new global::System.Nullable<global::System.DateTimeOffset> Modified { get; }
                new byte[] RowVersion { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation TransportRoute { get; set; }
                new global::System.Collections.IEnumerable PickingSlipDetails { get; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, int>.Entry
                    Id = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, int>.Entry(
                        "Id",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Id_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Id_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Id_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Id_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Id_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Id_OnValueChanged);
                private static void _Id_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, int>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._Id, sf);
                }
                private static bool _Id_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.Id_IsReadOnly(ref result);
                    return result;
                }
                private static void _Id_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Id_Validate(r);
                }
                private static int _Id_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.Id;
                }
                private static void _Id_SetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d, int v)
                {
                    d.ImplementationEntity.Id = v;
                }
                private static void _Id_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.Id_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Entry
                    PickingNo = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Entry(
                        "PickingNo",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingNo_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingNo_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingNo_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingNo_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingNo_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingNo_OnValueChanged);
                private static void _PickingNo_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._PickingNo, sf);
                }
                private static bool _PickingNo_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.PickingNo_IsReadOnly(ref result);
                    return result;
                }
                private static void _PickingNo_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.PickingNo_Validate(r);
                }
                private static string _PickingNo_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.PickingNo;
                }
                private static void _PickingNo_SetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d, string v)
                {
                    d.ImplementationEntity.PickingNo = v;
                }
                private static void _PickingNo_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.PickingNo_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.DateTime>.Entry
                    PickingDate = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.DateTime>.Entry(
                        "PickingDate",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingDate_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingDate_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingDate_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingDate_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingDate_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingDate_OnValueChanged);
                private static void _PickingDate_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._PickingDate, sf);
                }
                private static bool _PickingDate_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.PickingDate_IsReadOnly(ref result);
                    return result;
                }
                private static void _PickingDate_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.PickingDate_Validate(r);
                }
                private static global::System.DateTime _PickingDate_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.PickingDate;
                }
                private static void _PickingDate_SetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.PickingDate = global::LightSwitchApplication.PickingSlip.DetailsClass.TruncateDate(v);
                }
                private static void _PickingDate_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.PickingDate_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, double>.Entry
                    TotalWeight = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, double>.Entry(
                        "TotalWeight",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TotalWeight_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TotalWeight_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TotalWeight_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TotalWeight_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TotalWeight_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TotalWeight_OnValueChanged);
                private static void _TotalWeight_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, double>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._TotalWeight, sf);
                }
                private static bool _TotalWeight_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.TotalWeight_IsReadOnly(ref result);
                    return result;
                }
                private static void _TotalWeight_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TotalWeight_Validate(r);
                }
                private static double _TotalWeight_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.TotalWeight;
                }
                private static void _TotalWeight_SetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d, double v)
                {
                    d.ImplementationEntity.TotalWeight = v;
                }
                private static void _TotalWeight_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.TotalWeight_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, bool>.Entry
                    Status = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, bool>.Entry(
                        "Status",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Status_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Status_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Status_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Status_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Status_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Status_OnValueChanged);
                private static void _Status_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, bool>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._Status, sf);
                }
                private static bool _Status_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.Status_IsReadOnly(ref result);
                    return result;
                }
                private static void _Status_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Status_Validate(r);
                }
                private static bool _Status_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.Status;
                }
                private static void _Status_SetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.Status = v;
                }
                private static void _Status_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.Status_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Entry
                    Remark = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Entry(
                        "Remark",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Remark_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Remark_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Remark_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Remark_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Remark_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Remark_OnValueChanged);
                private static void _Remark_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._Remark, sf);
                }
                private static bool _Remark_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.Remark_IsReadOnly(ref result);
                    return result;
                }
                private static void _Remark_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Remark_Validate(r);
                }
                private static string _Remark_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.Remark;
                }
                private static void _Remark_SetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Remark = v;
                }
                private static void _Remark_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.Remark_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Entry
                    CreatedBy = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Entry(
                        "CreatedBy",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._CreatedBy_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._CreatedBy_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._CreatedBy_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._CreatedBy_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._CreatedBy_OnValueChanged);
                private static void _CreatedBy_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._CreatedBy, sf);
                }
                private static bool _CreatedBy_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.CreatedBy_IsReadOnly(ref result);
                    return result;
                }
                private static void _CreatedBy_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.CreatedBy_Validate(r);
                }
                private static string _CreatedBy_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.CreatedBy;
                }
                private static void _CreatedBy_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.CreatedBy_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Entry
                    Created = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Entry(
                        "Created",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Created_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Created_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Created_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Created_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Created_OnValueChanged);
                private static void _Created_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._Created, sf);
                }
                private static bool _Created_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.Created_IsReadOnly(ref result);
                    return result;
                }
                private static void _Created_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Created_Validate(r);
                }
                private static global::System.Nullable<global::System.DateTimeOffset> _Created_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.Created;
                }
                private static void _Created_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.Created_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Entry
                    ModifiedBy = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Entry(
                        "ModifiedBy",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._ModifiedBy_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._ModifiedBy_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._ModifiedBy_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._ModifiedBy_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._ModifiedBy_OnValueChanged);
                private static void _ModifiedBy_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._ModifiedBy, sf);
                }
                private static bool _ModifiedBy_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.ModifiedBy_IsReadOnly(ref result);
                    return result;
                }
                private static void _ModifiedBy_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ModifiedBy_Validate(r);
                }
                private static string _ModifiedBy_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.ModifiedBy;
                }
                private static void _ModifiedBy_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.ModifiedBy_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Entry
                    Modified = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Entry(
                        "Modified",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Modified_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Modified_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Modified_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Modified_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._Modified_OnValueChanged);
                private static void _Modified_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._Modified, sf);
                }
                private static bool _Modified_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.Modified_IsReadOnly(ref result);
                    return result;
                }
                private static void _Modified_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Modified_Validate(r);
                }
                private static global::System.Nullable<global::System.DateTimeOffset> _Modified_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.Modified;
                }
                private static void _Modified_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.Modified_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, byte[]>.Entry
                    RowVersion = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, byte[]>.Entry(
                        "RowVersion",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._RowVersion_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._RowVersion_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._RowVersion_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._RowVersion_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._RowVersion_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._RowVersion_OnValueChanged);
                private static void _RowVersion_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, byte[]>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._RowVersion, sf);
                }
                private static bool _RowVersion_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.RowVersion_IsReadOnly(ref result);
                    return result;
                }
                private static void _RowVersion_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.RowVersion_Validate(r);
                }
                private static byte[] _RowVersion_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.RowVersion;
                }
                private static void _RowVersion_SetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d, byte[] v)
                {
                    d.ImplementationEntity.RowVersion = v;
                }
                private static void _RowVersion_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.RowVersion_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.TransportRoute>.Entry
                    TransportRoute = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.TransportRoute>.Entry(
                        "TransportRoute",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TransportRoute_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TransportRoute_ComputeIsReadOnly,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TransportRoute_Validate,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TransportRoute_GetCoreImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TransportRoute_GetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TransportRoute_SetImplementationValue,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TransportRoute_Refresh,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._TransportRoute_OnValueChanged);
                private static void _TransportRoute_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.TransportRoute>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._TransportRoute, sf);
                }
                private static bool _TransportRoute_ComputeIsReadOnly(global::LightSwitchApplication.PickingSlip e)
                {
                    bool result = false;
                    e.TransportRoute_IsReadOnly(ref result);
                    return result;
                }
                private static void _TransportRoute_Validate(global::LightSwitchApplication.PickingSlip e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TransportRoute_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _TransportRoute_GetCoreImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.TransportRoute;
                }
                private static global::LightSwitchApplication.TransportRoute _TransportRoute_GetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.TransportRoute, global::LightSwitchApplication.TransportRoute.DetailsClass>(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.TransportRoute, ref d._TransportRoute);
                }
                private static void _TransportRoute_SetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass d, global::LightSwitchApplication.TransportRoute v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.TransportRoute, ref d._TransportRoute, (i, ev) => i.TransportRoute = ev, v);
                }
                private static void _TransportRoute_Refresh(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.TransportRoute, ref d._TransportRoute);
                }
                private static void _TransportRoute_OnValueChanged(global::LightSwitchApplication.PickingSlip e)
                {
                    e.TransportRoute_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.PickingSlipDetail>.Entry
                    PickingSlipDetails = new global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.PickingSlipDetail>.Entry(
                        "PickingSlipDetails",
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingSlipDetails_Stub,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingSlipDetails_GetReferencedEntities,
                        global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties._PickingSlipDetails_GetEntityCollection);
                private static void _PickingSlipDetails_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PickingSlip.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.PickingSlipDetail>.Data> c, global::LightSwitchApplication.PickingSlip.DetailsClass d, object sf)
                {
                    c(d, ref d._PickingSlipDetails, sf);
                }
                private static global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.PickingSlipDetail> _PickingSlipDetails_GetReferencedEntities(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.GetReferencedEntities<global::LightSwitchApplication.PickingSlipDetail, global::LightSwitchApplication.PickingSlipDetail.DetailsClass>(global::LightSwitchApplication.PickingSlip.DetailsClass.PropertySetProperties.PickingSlipDetails, ref d._PickingSlipDetails);
                }
                private static global::System.Collections.IEnumerable _PickingSlipDetails_GetEntityCollection(global::LightSwitchApplication.PickingSlip.DetailsClass d)
                {
                    return d.ImplementationEntity.PickingSlipDetails;
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, int>.Data _Id;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Data _PickingNo;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.DateTime>.Data _PickingDate;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, double>.Data _TotalWeight;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, bool>.Data _Status;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Data _Remark;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Data _CreatedBy;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Data _Created;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, string>.Data _ModifiedBy;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::System.Nullable<global::System.DateTimeOffset>>.Data _Modified;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, byte[]>.Data _RowVersion;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.TransportRoute>.Data _TransportRoute;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.PickingSlip, global::LightSwitchApplication.PickingSlip.DetailsClass, global::LightSwitchApplication.PickingSlipDetail>.Data _PickingSlipDetails;
            
        }
    
        #endregion
    }
    
    #endregion
}
